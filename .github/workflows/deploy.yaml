name: Deploy to ECS

on:
  push:
    branches:
      - main # Trigger the workflow when changes are pushed to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner for the job

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx for building multi-platform Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Configure AWS credentials using GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Step 4: Log in to Amazon ECR to allow Docker to push images to ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: 'private'
          mask-password: true

      # Step 5: Build, tag, and push Docker image to Amazon ECR
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: 864899850389.dkr.ecr.eu-west-3.amazonaws.com
          ECR_REPOSITORY: projects-repo
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  # Build Docker image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  # Push Docker image to ECR

      # Step 6: Set up Terraform to manage infrastructure as code
      - name: Download Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      # Step 7: Initialize Terraform in the specified directory
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Step 8: Apply the Terraform configuration to deploy resources
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      # Step 9: Force a new deployment of the ECS service to use the updated image
      - name: Force ECS Service Deployment
        run: |
          aws ecs update-service \
            --cluster development-server-cluster \
            --service development-server-service \
            --force-new-deployment
